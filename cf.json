{
    "AWSTemplateFormatVersion": "2010-09-09", 
    "Description": "AWS Instance scheduler, version 2.10.0.25 - modified by chang.li3@treasury.gov", 
    "Parameters": {
        "SchedulingActive": {
            "Type": "String", 
            "AllowedValues": [
                "Yes", 
                "No"
            ], 
            "Default": "Yes", 
            "Description": "Activate or deactivate scheduling."
        }, 
        "ScheduledServices": {
            "Type": "String", 
            "AllowedValues": [
                "EC2", 
                "RDS", 
                "Both"
            ], 
            "Default": "EC2", 
            "Description": "Scheduled Services"
        }, 
        "MemorySize": {
            "Type": "Number", 
            "AllowedValues": [
                128, 
                384, 
                512, 
                640, 
                768, 
                896, 
                1024, 
                1152, 
                1280, 
                1408, 
                1536
            ], 
            "Default": 128, 
            "Description": "Size of the Lambda function running the scheduler, increase size when processing large numbers of instances"
        }, 
        "UseCloudWatchMetrics": {
            "Type": "String", 
            "AllowedValues": [
                "Yes", 
                "No"
            ], 
            "Default": "No", 
            "Description": "Collect instance scheduling data using CloudWatch metrics."
        }, 
        "LogRetentionDays": {
            "Type": "Number", 
            "Default": 30, 
            "AllowedValues": [
                1, 
                3, 
                5, 
                7, 
                14, 
                30, 
                60, 
                90, 
                120, 
                150, 
                180, 
                365, 
                400, 
                545, 
                731, 
                1827, 
                3653
            ], 
            "Description": "Retention days for scheduler logs."
        }, 
        "Trace": {
            "Type": "String", 
            "AllowedValues": [
                "Yes", 
                "No"
            ], 
            "Default": "No", 
            "Description": "Enable logging of detailed informtion in CloudWatch logs."
        }, 
        "TagName": {
            "Type": "String", 
            "Default": "RunSchedule", 
            "MinLength": 1, 
            "MaxLength": 127, 
            "Description": "Name of tag to use for associating instance schedule schemas with service instances."
        }, 
        "DefaultTimezone": {
            "Type": "String", 
            "Default": "UTC", 
            "Description": "Choose the default Time Zone. Default is 'UTC'"
        }, 
        "Regions": {
            "Type": "CommaDelimitedList", 
            "Description": "List of regions in which instances are scheduled, leave blank for current region only."
        }, 
        "CrossAccountRoles": {
            "Type": "CommaDelimitedList", 
            "Description": "Comma separated list of ARN's for cross account access roles. These roles must be created in all checked accounts the scheduler to start and stop instances."
        }, 
        "StartedTags": {
			"Default": "ScheduleStartMessage=Started on {year}/{month}/{day} at {hour}:{minute} by {scheduler}",
            "Type": "String", 
            "Description": "Comma separated list of tagname and values on the formt name=value,name=value,.. that are set on started instances"
        }, 
        "StoppedTags": {
			"Default": "ScheduleStopMessage=Stopped on {year}/{month}/{day} at {hour}:{minute} by {scheduler}",
            "Type": "String", 
            "Description": "Comma separated list of tagname and values on the formt name=value,name=value,.. that are set on stopped instances"
        }, 
        "SchedulerFrequency": {
            "Type": "String", 
            "AllowedValues": [
                "1", 
                "2", 
                "5", 
                "10", 
                "15", 
                "30", 
                "60"
            ], 
            "Default": "5", 
            "Description": "Scheduler running frequency in minutes."
        }, 
        "ScheduleLambdaAccount": {
            "Type": "String", 
            "AllowedValues": [
                "Yes", 
                "No"
            ], 
            "Default": "Yes", 
            "Description": "Schedule instances in this account."
        }, 
        "SendAnonymousData": {
            "Type": "String", 
            "AllowedValues": [
                "Yes", 
                "No"
            ], 
            "Default": "Yes", 
            "Description": "Send Anonymous Metrics Data."
        }
    }, 
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Scheduler (version 2.10.0.25)"
                    }, 
                    "Parameters": [
                        "TagName", 
                        "ScheduledServices", 
                        "SchedulingActive", 
                        "Regions", 
                        "DefaultTimezone", 
                        "CrossAccountRoles", 
                        "ScheduleLambdaAccount", 
                        "SchedulerFrequency", 
                        "MemorySize"
                    ]
                }, 
                {
                    "Label": {
                        "default": "Options"
                    }, 
                    "Parameters": [
                        "UseCloudWatchMetrics", 
                        "SendAnonymousData", 
                        "Trace"
                    ]
                }, 
                {
                    "Label": {
                        "default": "Other parameters"
                    }, 
                    "Parameters": [
                        "LogRetentionDays", 
                        "StartedTags", 
                        "StoppedTags"
                    ]
                }
            ], 
            "ParameterLabels": {
                "LogRetentionDays": {
                    "default": "Log retention days"
                }, 
                "StartedTags": {
                    "default": "Started tags"
                }, 
                "StoppedTags": {
                    "default": "Stopped tags"
                }, 
                "SchedulingActive": {
                    "default": "Scheduling enabled"
                }, 
                "CrossAccountRoles": {
                    "default": "Cross-account roles"
                }, 
                "ScheduleLambdaAccount": {
                    "default": "This account"
                }, 
                "UseCloudWatchMetrics": {
                    "default": "Enable CloudWatch Metrics"
                }, 
                "Trace": {
                    "default": "Enable CloudWatch Logs"
                }, 
                "TagName": {
                    "default": "Instance Scheduler tag name"
                }, 
                "ScheduledServices": {
                    "default": "Service(s) to schedule"
                }, 
                "DefaultTimezone": {
                    "default": "Default time zone"
                }, 
                "SchedulerFrequency": {
                    "default": "Frequency"
                }, 
                "Regions": {
                    "default": "Region(s)"
                }, 
                "MemorySize": {
                    "default": "Memory size"
                }, 
                "SendAnonymousData": {
                    "default": "Send anonymous usage data"
                }
            }
        }
    }, 
    "Mappings": {
        "TrueFalse": {
            "Yes": {
                "Value": "True"
            }, 
            "No": {
                "Value": "False"
            }
        }, 
        "EnabledDisabled": {
            "Yes": {
                "Value": "ENABLED"
            }, 
            "No": {
                "Value": "DISABLED"
            }
        }, 
        "Services": {
            "EC2": {
                "Value": "ec2"
            }, 
            "RDS": {
                "Value": "rds"
            }, 
            "Both": {
                "Value": "ec2,rds"
            }
        }, 
        "Timeouts": {
            "1": {
                "Value": "cron(0/1 * * * ? *)"
            }, 
            "2": {
                "Value": "cron(0/2 * * * ? *)"
            }, 
            "5": {
                "Value": "cron(0/5 * * * ? *)"
            }, 
            "10": {
                "Value": "cron(0/10 * * * ? *)"
            }, 
            "15": {
                "Value": "cron(0/15 * * * ? *)"
            }, 
            "30": {
                "Value": "cron(0/30 * * * ? *)"
            }, 
            "60": {
                "Value": "cron(0 0/1 * * ? *)"
            }
        }, 
        "Settings": {
            "Metrics": {
                "Url": "https://metrics.awssolutionsbuilder.com/generic", 
                "SolutionId": "S00030"
            }, 
            "DynamoDbTableCapacities": {
                "ConfigTableMinRead": 2, 
                "ConfigTableMaxRead": 10, 
                "ConfigTableMinWrite": 2, 
                "ConfigTableMaxWrite": 5, 
                "StateTableMinRead": 5, 
                "StateTableMaxRead": 50, 
                "StateTableMinWrite": 5, 
                "StateTableMaxWrite": 50, 
                "RdsTagCacheTableMinRead": 5, 
                "RdsTagCacheTableMaxRead": 50, 
                "RdsTagCacheTableMinWrite": 5, 
                "RdsTagCacheTableMaxWrite": 50
            }, 
            "RdsTagCaching": {
                "Enabled": "True"
            }
        }
    }, 
    "Conditions": {
        "NotUsingCrossAccountRoles": {
            "Fn::Equals": [
                {
                    "Fn::Join": [
                        "", 
                        {
                            "Ref": "CrossAccountRoles"
                        }
                    ]
                }, 
                ""
            ]
        }
    }, 
    "Resources": {
        "SchedulerPolicy": {
            "Type": "AWS::IAM::Policy", 
            "Properties": {
                "PolicyName": "SchedulerPolicy", 
                "Roles": [
                    {
                        "Ref": "SchedulerRole"
                    }
                ], 
                "PolicyDocument": {
                    "Version": "2012-10-17", 
                    "Statement": [
                        {
                            "Effect": "Allow", 
                            "Action": [
                                "logs:CreateLogGroup", 
                                "logs:CreateLogStream", 
                                "logs:PutLogEvents"
                            ], 
                            "Resource": "*"
                        }, 
                        {
                            "Effect": "Allow", 
                            "Action": [
                                "ec2:CreateTags", 
                                "ec2:DeleteTags", 
                                "ec2:DescribeInstances", 
                                "ec2:DescribeRegions", 
                                "ec2:ModifyInstanceAttribute", 
                                "ec2:StartInstances", 
                                "ec2:StopInstances"
                            ], 
                            "Resource": [
                                "*"
                            ]
                        }, 
                        {
                            "Effect": "Allow", 
                            "Action": [
                                "rds:AddTagsToResource", 
                                "rds:DeleteDBSnapshot", 
                                "rds:DescribeDBInstances", 
                                "rds:DescribeDBSnapshots", 
                                "rds:RemoveTagsFromResource", 
                                "rds:StartDBInstance", 
                                "rds:StopDBInstance"
                            ], 
                            "Resource": [
                                "*"
                            ]
                        }, 
                        {
                            "Effect": "Allow", 
                            "Action": [
                                "dynamodb:DeleteItem", 
                                "dynamodb:GetItem", 
                                "dynamodb:PutItem", 
                                "dynamodb:Query", 
                                "dynamodb:Scan", 
                                "dynamodb:BatchWriteItem"
                            ], 
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            {
                                                "Fn::Join": [
                                                    ":", 
                                                    [
                                                        "arn:aws:dynamodb", 
                                                        {
                                                            "Ref": "AWS::Region"
                                                        }, 
                                                        {
                                                            "Ref": "AWS::AccountId"
                                                        }, 
                                                        "table/"
                                                    ]
                                                ]
                                            }, 
                                            {
                                                "Ref": "StateTable"
                                            }
                                        ]
                                    ]
                                }, 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            {
                                                "Fn::Join": [
                                                    ":", 
                                                    [
                                                        "arn:aws:dynamodb", 
                                                        {
                                                            "Ref": "AWS::Region"
                                                        }, 
                                                        {
                                                            "Ref": "AWS::AccountId"
                                                        }, 
                                                        "table/"
                                                    ]
                                                ]
                                            }, 
                                            {
                                                "Ref": "ConfigTable"
                                            }
                                        ]
                                    ]
                                }
                            ]
                        }, 
                        {
                            "Effect": "Allow", 
                            "Action": [
                                "logs:DescribeLogStreams", 
                                "logs:PutRetentionPolicy"
                            ], 
                            "Resource": [
                                "*"
                            ]
                        }, 
                        {
                            "Effect": "Allow", 
                            "Action": "sns:Publish", 
                            "Resource": [
                                {
                                    "Ref": "InstanceSchedulerSnsTopic"
                                }
                            ]
                        }, 
                        {
                            "Effect": "Allow", 
                            "Action": [
                                "lambda:InvokeFunction"
                            ], 
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        ":", 
                                        [
                                            "arn:aws:lambda", 
                                            {
                                                "Ref": "AWS::Region"
                                            }, 
                                            {
                                                "Ref": "AWS::AccountId"
                                            }, 
                                            "function", 
                                            {
                                                "Fn::Join": [
                                                    "-", 
                                                    [
                                                        {
                                                            "Ref": "AWS::StackName"
                                                        }, 
                                                        "InstanceSchedulerMain"
                                                    ]
                                                ]
                                            }
                                        ]
                                    ]
                                }
                            ]
                        }, 
                        {
                            "Effect": "Allow", 
                            "Action": [
                                "tag:GetResources"
                            ], 
                            "Resource": [
                                "*"
                            ]
                        }, 
                        {
                            "Effect": "Allow", 
                            "Action": [
                                "cloudwatch:PutMetricData"
                            ], 
                            "Resource": [
                                "*"
                            ]
                        }, 
                        {
                            "Effect": "Allow", 
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Resource": {
                                "Fn::If": [
                                    "NotUsingCrossAccountRoles", 
                                    {
                                        "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/None"
                                    }, 
                                    {
                                        "Ref": "CrossAccountRoles"
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        }, 
        "SchedulerRole": {
            "Type": "AWS::IAM::Role", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17", 
                    "Statement": [
                        {
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }, 
                            "Action": "sts:AssumeRole"
                        }, 
                        {
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": "events.amazonaws.com"
                            }, 
                            "Action": "sts:AssumeRole"
                        }
                    ]
                }, 
                "Path": "/"
            }
        }, 
        "SchedulerDynamoDBScalingRole": {
            "Type": "AWS::IAM::Role", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17", 
                    "Statement": [
                        {
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": "application-autoscaling.amazonaws.com", 
                                "AWS": {
                                    "Fn::GetAtt": [
                                        "SchedulerRole", 
                                        "Arn"
                                    ]
                                }
                            }, 
                            "Action": "sts:AssumeRole"
                        }
                    ]
                }, 
                "Policies": [
                    {
                        "PolicyName": "OpsAutomatorScalingRolePolicy", 
                        "PolicyDocument": {
                            "Version": "2012-10-17", 
                            "Statement": [
                                {
                                    "Effect": "Allow", 
                                    "Action": [
                                        "dynamodb:DescribeTable", 
                                        "dynamodb:UpdateTable", 
                                        "cloudwatch:PutMetricAlarm", 
                                        "cloudwatch:DescribeAlarms", 
                                        "cloudwatch:GetMetricStatistics", 
                                        "cloudwatch:SetAlarmState", 
                                        "cloudwatch:DeleteAlarms"
                                    ], 
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ], 
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole", 
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ], 
                "Path": "/"
            }, 
            "DependsOn": [
                "SchedulerRole"
            ]
        }, 
        "StateTable": {
            "Type": "AWS::DynamoDB::Table", 
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "service", 
                        "AttributeType": "S"
                    }, 
                    {
                        "AttributeName": "account-region", 
                        "AttributeType": "S"
                    }
                ], 
                "KeySchema": [
                    {
                        "AttributeName": "service", 
                        "KeyType": "HASH"
                    }, 
                    {
                        "AttributeName": "account-region", 
                        "KeyType": "RANGE"
                    }
                ], 
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": {
                        "Fn::FindInMap": [
                            "Settings", 
                            "DynamoDbTableCapacities", 
                            "StateTableMinRead"
                        ]
                    }, 
                    "WriteCapacityUnits": {
                        "Fn::FindInMap": [
                            "Settings", 
                            "DynamoDbTableCapacities", 
                            "StateTableMinWrite"
                        ]
                    }
                }
            }
        }, 
        "StateTableAutoScalingReadTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget", 
            "Properties": {
                "MaxCapacity": {
                    "Fn::FindInMap": [
                        "Settings", 
                        "DynamoDbTableCapacities", 
                        "StateTableMaxRead"
                    ]
                }, 
                "MinCapacity": {
                    "Fn::FindInMap": [
                        "Settings", 
                        "DynamoDbTableCapacities", 
                        "StateTableMinRead"
                    ]
                }, 
                "ResourceId": {
                    "Fn::Join": [
                        "/", 
                        [
                            "table", 
                            {
                                "Ref": "StateTable"
                            }
                        ]
                    ]
                }, 
                "RoleARN": {
                    "Fn::GetAtt": [
                        "SchedulerDynamoDBScalingRole", 
                        "Arn"
                    ]
                }, 
                "ScalableDimension": "dynamodb:table:ReadCapacityUnits", 
                "ServiceNamespace": "dynamodb"
            }
        }, 
        "StateTableAutoScalingReadPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy", 
            "Properties": {
                "PolicyName": {
                    "Fn::Join": [
                        "-", 
                        [
                            {
                                "Ref": "AWS::StackName"
                            }, 
                            "StateTableAutoScalingReadPolicy"
                        ]
                    ]
                }, 
                "PolicyType": "TargetTrackingScaling", 
                "ScalingTargetId": {
                    "Ref": "StateTableAutoScalingReadTarget"
                }, 
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 75.0, 
                    "ScaleInCooldown": 60, 
                    "ScaleOutCooldown": 60, 
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBReadCapacityUtilization"
                    }
                }
            }
        }, 
        "StateTableAutoScalingWriteTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget", 
            "Properties": {
                "MaxCapacity": {
                    "Fn::FindInMap": [
                        "Settings", 
                        "DynamoDbTableCapacities", 
                        "StateTableMaxWrite"
                    ]
                }, 
                "MinCapacity": {
                    "Fn::FindInMap": [
                        "Settings", 
                        "DynamoDbTableCapacities", 
                        "StateTableMinWrite"
                    ]
                }, 
                "ResourceId": {
                    "Fn::Join": [
                        "/", 
                        [
                            "table", 
                            {
                                "Ref": "StateTable"
                            }
                        ]
                    ]
                }, 
                "RoleARN": {
                    "Fn::GetAtt": [
                        "SchedulerDynamoDBScalingRole", 
                        "Arn"
                    ]
                }, 
                "ScalableDimension": "dynamodb:table:WriteCapacityUnits", 
                "ServiceNamespace": "dynamodb"
            }
        }, 
        "StateTableAutoScalingWritePolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy", 
            "Properties": {
                "PolicyName": {
                    "Fn::Join": [
                        "-", 
                        [
                            {
                                "Ref": "AWS::StackName"
                            }, 
                            "StateTableAutoScalingWritePolicy"
                        ]
                    ]
                }, 
                "PolicyType": "TargetTrackingScaling", 
                "ScalingTargetId": {
                    "Ref": "StateTableAutoScalingWriteTarget"
                }, 
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 75.0, 
                    "ScaleInCooldown": 60, 
                    "ScaleOutCooldown": 60, 
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
                    }
                }
            }, 
            "DependsOn": [
                "StateTableAutoScalingReadPolicy"
            ]
        }, 
        "ConfigTable": {
            "Type": "AWS::DynamoDB::Table", 
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "type", 
                        "AttributeType": "S"
                    }, 
                    {
                        "AttributeName": "name", 
                        "AttributeType": "S"
                    }
                ], 
                "KeySchema": [
                    {
                        "AttributeName": "type", 
                        "KeyType": "HASH"
                    }, 
                    {
                        "AttributeName": "name", 
                        "KeyType": "RANGE"
                    }
                ], 
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 2, 
                    "WriteCapacityUnits": 2
                }
            }
        }, 
        "ConfigTableAutoScalingReadTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget", 
            "Properties": {
                "MaxCapacity": {
                    "Fn::FindInMap": [
                        "Settings", 
                        "DynamoDbTableCapacities", 
                        "ConfigTableMaxRead"
                    ]
                }, 
                "MinCapacity": {
                    "Fn::FindInMap": [
                        "Settings", 
                        "DynamoDbTableCapacities", 
                        "ConfigTableMinRead"
                    ]
                }, 
                "ResourceId": {
                    "Fn::Join": [
                        "/", 
                        [
                            "table", 
                            {
                                "Ref": "ConfigTable"
                            }
                        ]
                    ]
                }, 
                "RoleARN": {
                    "Fn::GetAtt": [
                        "SchedulerDynamoDBScalingRole", 
                        "Arn"
                    ]
                }, 
                "ScalableDimension": "dynamodb:table:ReadCapacityUnits", 
                "ServiceNamespace": "dynamodb"
            }
        }, 
        "ConfigurationTableAutoScalingReadPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy", 
            "Properties": {
                "PolicyName": {
                    "Fn::Join": [
                        "-", 
                        [
                            {
                                "Ref": "AWS::StackName"
                            }, 
                            "ConfigTableAutoScalingReadPolicy"
                        ]
                    ]
                }, 
                "PolicyType": "TargetTrackingScaling", 
                "ScalingTargetId": {
                    "Ref": "ConfigTableAutoScalingReadTarget"
                }, 
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 75.0, 
                    "ScaleInCooldown": 60, 
                    "ScaleOutCooldown": 60, 
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBReadCapacityUtilization"
                    }
                }
            }, 
            "DependsOn": "StateTableAutoScalingWritePolicy"
        }, 
        "ConfigTableAutoScalingWriteTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget", 
            "Properties": {
                "MaxCapacity": {
                    "Fn::FindInMap": [
                        "Settings", 
                        "DynamoDbTableCapacities", 
                        "ConfigTableMaxWrite"
                    ]
                }, 
                "MinCapacity": {
                    "Fn::FindInMap": [
                        "Settings", 
                        "DynamoDbTableCapacities", 
                        "ConfigTableMinWrite"
                    ]
                }, 
                "ResourceId": {
                    "Fn::Join": [
                        "/", 
                        [
                            "table", 
                            {
                                "Ref": "ConfigTable"
                            }
                        ]
                    ]
                }, 
                "RoleARN": {
                    "Fn::GetAtt": [
                        "SchedulerDynamoDBScalingRole", 
                        "Arn"
                    ]
                }, 
                "ScalableDimension": "dynamodb:table:WriteCapacityUnits", 
                "ServiceNamespace": "dynamodb"
            }
        }, 
        "ConfigTableAutoScalingWritePolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy", 
            "Properties": {
                "PolicyName": {
                    "Fn::Join": [
                        "-", 
                        [
                            {
                                "Ref": "AWS::StackName"
                            }, 
                            "ConfigTableAutoScalingWritePolicy"
                        ]
                    ]
                }, 
                "PolicyType": "TargetTrackingScaling", 
                "ScalingTargetId": {
                    "Ref": "ConfigTableAutoScalingWriteTarget"
                }, 
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 75.0, 
                    "ScaleInCooldown": 60, 
                    "ScaleOutCooldown": 60, 
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
                    }
                }
            }, 
            "DependsOn": [
                "ConfigurationTableAutoScalingReadPolicy"
            ]
        }, 
        "SchedulerLogGroup": {
            "Type": "AWS::Logs::LogGroup", 
            "Properties": {
                "LogGroupName": {
                    "Fn::Join": [
                        "-", 
                        [
                            {
                                "Ref": "AWS::StackName"
                            }, 
                            "logs"
                        ]
                    ]
                }, 
                "RetentionInDays": {
                    "Ref": "LogRetentionDays"
                }
            }
        }, 
        "InstanceSchedulerSnsTopic": {
            "Type": "AWS::SNS::Topic", 
            "Properties": {
                "DisplayName": {
                    "Ref": "AWS::StackName"
                }
            }
        }, 
        "Main": {
            "Type": "AWS::Lambda::Function", 
            "Properties": {
                "FunctionName": {
                    "Fn::Join": [
                        "-", 
                        [
                            {
                                "Ref": "AWS::StackName"
                            }, 
                            "InstanceSchedulerMain"
                        ]
                    ]
                }, 
                "Code": {
                    "S3Bucket": "workplace.gov", 
                    "S3Key": "lambda-scheduler.zip"
                }, 
                "Handler": "main.lambda_handler", 
                "Runtime": "python2.7", 
                "Role": {
                    "Fn::GetAtt": [
                        "SchedulerRole", 
                        "Arn"
                    ]
                }, 
                "Environment": {
                    "Variables": {
                        "CONFIG_TABLE": {
                            "Ref": "ConfigTable"
                        }, 
                        "TAG_NAME": {
                            "Ref": "TagName"
                        }, 
                        "STATE_TABLE": {
                            "Ref": "StateTable"
                        }, 
                        "LOG_GROUP": {
                            "Ref": "SchedulerLogGroup"
                        }, 
                        "ACCOUNT": {
                            "Ref": "AWS::AccountId"
                        }, 
                        "ISSUES_TOPIC_ARN": {
                            "Ref": "InstanceSchedulerSnsTopic"
                        }, 
                        "STACK_NAME": {
                            "Ref": "AWS::StackName"
                        }, 
                        "BOTO_RETRY": "5,10,30,0.25", 
                        "ENV_BOTO_RETRY_LOGGING": "False", 
                        "SEND_METRICS": {
                            "Fn::FindInMap": [
                                "TrueFalse", 
                                {
                                    "Ref": "SendAnonymousData"
                                }, 
                                "Value"
                            ]
                        }, 
                        "SOLUTION_ID": {
                            "Fn::FindInMap": [
                                "Settings", 
                                "Metrics", 
                                "SolutionId"
                            ]
                        }, 
                        "TRACE": {
                            "Fn::FindInMap": [
                                "TrueFalse", 
                                {
                                    "Ref": "Trace"
                                }, 
                                "Value"
                            ]
                        }, 
                        "USER_AGENT": {
                            "Fn::Join": [
                                "-", 
                                [
                                    "InstanceScheduler", 
                                    {
                                        "Ref": "AWS::StackName"
                                    }, 
                                    "2.10.0.25"
                                ]
                            ]
                        }, 
                        "METRICS_URL": {
                            "Fn::FindInMap": [
                                "Settings", 
                                "Metrics", 
                                "Url"
                            ]
                        }
                    }
                }, 
                "MemorySize": {
                    "Ref": "MemorySize"
                }, 
                "Timeout": 300, 
                "Description": "Modified based on AWS ECS and RDS instance scheduler, version 2.10.0.25"
            }, 
            "DependsOn": [
                "SchedulerPolicy", 
                "SchedulerRole"
            ]
        }, 
        "SchedulerInvokePermission": {
            "Type": "AWS::Lambda::Permission", 
            "Properties": {
                "FunctionName": {
                    "Fn::Join": [
                        ":", 
                        [
                            "arn:aws:lambda", 
                            {
                                "Ref": "AWS::Region"
                            }, 
                            {
                                "Ref": "AWS::AccountId"
                            }, 
                            "function", 
                            {
                                "Fn::Join": [
                                    "-", 
                                    [
                                        {
                                            "Ref": "AWS::StackName"
                                        }, 
                                        "InstanceSchedulerMain"
                                    ]
                                ]
                            }
                        ]
                    ]
                }, 
                "Action": "lambda:InvokeFunction", 
                "Principal": "events.amazonaws.com", 
                "SourceArn": {
                    "Fn::GetAtt": [
                        "SchedulerRule", 
                        "Arn"
                    ]
                }
            }, 
            "DependsOn": "Main"
        }, 
        "SchedulerRule": {
            "Type": "AWS::Events::Rule", 
            "Properties": {
                "Description": "Instance Scheduler - Rule to trigger instance for scheduler function version 2.10.0.25", 
                "ScheduleExpression": {
                    "Fn::FindInMap": [
                        "Timeouts", 
                        {
                            "Ref": "SchedulerFrequency"
                        }, 
                        "Value"
                    ]
                }, 
                "State": {
                    "Fn::FindInMap": [
                        "EnabledDisabled", 
                        {
                            "Ref": "SchedulingActive"
                        }, 
                        "Value"
                    ]
                }, 
                "Targets": [
                    {
                        "Id": "Instance-Scheduler-Main", 
                        "Arn": {
                            "Fn::GetAtt": [
                                "Main", 
                                "Arn"
                            ]
                        }
                    }
                ]
            }
        }, 
        "SchedulerConfigHelper": {
            "Type": "Custom::ServiceSetup", 
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "Main", 
                        "Arn"
                    ]
                }, 
                "timeout": "120", 
                "config_table": {
                    "Ref": "ConfigTable"
                }, 
                "tagname": {
                    "Ref": "TagName"
                }, 
                "default_timezone": {
                    "Ref": "DefaultTimezone"
                }, 
                "use_metrics": {
                    "Fn::FindInMap": [
                        "TrueFalse", 
                        {
                            "Ref": "UseCloudWatchMetrics"
                        }, 
                        "Value"
                    ]
                }, 
                "scheduled_services": {
                    "Fn::Split": [
                        ",", 
                        {
                            "Fn::FindInMap": [
                                "Services", 
                                {
                                    "Ref": "ScheduledServices"
                                }, 
                                "Value"
                            ]
                        }
                    ]
                }, 
                "regions": {
                    "Ref": "Regions"
                }, 
                "cross_account_roles": {
                    "Ref": "CrossAccountRoles"
                }, 
                "schedule_lambda_account": {
                    "Fn::FindInMap": [
                        "TrueFalse", 
                        {
                            "Ref": "ScheduleLambdaAccount"
                        }, 
                        "Value"
                    ]
                }, 
                "trace": {
                    "Fn::FindInMap": [
                        "TrueFalse", 
                        {
                            "Ref": "Trace"
                        }, 
                        "Value"
                    ]
                }, 
                "log_retention_days": {
                    "Ref": "LogRetentionDays"
                }, 
                "started_tags": {
                    "Ref": "StartedTags"
                }, 
                "stopped_tags": {
                    "Ref": "StoppedTags"
                }, 
                "stack_version": "2.10.0.25"
            }, 
            "DependsOn": [
                "Main", 
                "ConfigTable", 
                "SchedulerLogGroup"
            ]
        }
    }, 
    "Outputs": {
        "AccountId": {
            "Value": {
                "Ref": "AWS::AccountId"
            }, 
            "Description": "Account to give access to when creating cross-account access role fro cross account scenario "
        }, 
        "ConfigurationTable": {
            "Value": {
                "Ref": "ConfigTable"
            }, 
            "Description": "Name of the DynomoDB configuration table"
        }, 
        "IssueSnsTopicArn": {
            "Value": {
                "Ref": "InstanceSchedulerSnsTopic"
            }, 
            "Description": "Topic to subscribe to for notifications of errors and warnings"
        }, 
        "ServiceInstanceScheduleServiceToken": {
            "Value": {
                "Fn::GetAtt": [
                    "Main", 
                    "Arn"
                ]
            }, 
            "Description": "Arn to use as ServiceToken property for custom resource type Custom::ServiceInstanceSchedule"
        }
    }
}
